
w2@11_12.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007be  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  000007be  00000832  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000852  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000884  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000148  00000000  00000000  000008c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000017af  00000000  00000000  00000a08  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009c9  00000000  00000000  000021b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b60  00000000  00000000  00002b80  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000025c  00000000  00000000  000036e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006f4  00000000  00000000  0000393c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c42  00000000  00000000  00004030  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000100  00000000  00000000  00004c72  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee eb       	ldi	r30, 0xBE	; 190
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 0b 03 	call	0x616	; 0x616 <main>
  7a:	0c 94 dd 03 	jmp	0x7ba	; 0x7ba <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <ADC_voidInit>:
#include "ADC_register.h"


void ADC_voidInit(u8 copy_u8ReferenceVoltage)
{
	switch(copy_u8ReferenceVoltage)
  82:	81 30       	cpi	r24, 0x01	; 1
  84:	21 f0       	breq	.+8      	; 0x8e <ADC_voidInit+0xc>
  86:	50 f0       	brcs	.+20     	; 0x9c <ADC_voidInit+0x1a>
  88:	82 30       	cpi	r24, 0x02	; 2
  8a:	79 f0       	breq	.+30     	; 0xaa <ADC_voidInit+0x28>
  8c:	14 c0       	rjmp	.+40     	; 0xb6 <ADC_voidInit+0x34>
	{
		case ADC_REFERENCE_AREF:
		CLR_BIT(ADMUX_REG, REFS0);
  8e:	87 b1       	in	r24, 0x07	; 7
  90:	8f 7b       	andi	r24, 0xBF	; 191
  92:	87 b9       	out	0x07, r24	; 7
		CLR_BIT(ADMUX_REG, REFS1);
  94:	87 b1       	in	r24, 0x07	; 7
  96:	8f 77       	andi	r24, 0x7F	; 127
  98:	87 b9       	out	0x07, r24	; 7
		break;
  9a:	0d c0       	rjmp	.+26     	; 0xb6 <ADC_voidInit+0x34>
		
		case ADC_REFERENCE_AVCC:
		SET_BIT(ADMUX_REG, REFS0);
  9c:	87 b1       	in	r24, 0x07	; 7
  9e:	80 64       	ori	r24, 0x40	; 64
  a0:	87 b9       	out	0x07, r24	; 7
		CLR_BIT(ADMUX_REG, REFS1);
  a2:	87 b1       	in	r24, 0x07	; 7
  a4:	8f 77       	andi	r24, 0x7F	; 127
  a6:	87 b9       	out	0x07, r24	; 7
		break;
  a8:	06 c0       	rjmp	.+12     	; 0xb6 <ADC_voidInit+0x34>
		
		case ADC_REFERENCE_INTRNAL:
		SET_BIT(ADMUX_REG, REFS0);
  aa:	87 b1       	in	r24, 0x07	; 7
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	87 b9       	out	0x07, r24	; 7
		SET_BIT(ADMUX_REG, REFS1);
  b0:	87 b1       	in	r24, 0x07	; 7
  b2:	80 68       	ori	r24, 0x80	; 128
  b4:	87 b9       	out	0x07, r24	; 7
		break;
	}
	
	// Select Right Adjustment 
	CLR_BIT(ADMUX_REG, ADLAR);
  b6:	87 b1       	in	r24, 0x07	; 7
  b8:	8f 7d       	andi	r24, 0xDF	; 223
  ba:	87 b9       	out	0x07, r24	; 7
	
	// Single Conversion Mode
	CLR_BIT(ADCSRA_REG, ADATE);
  bc:	86 b1       	in	r24, 0x06	; 6
  be:	8f 7d       	andi	r24, 0xDF	; 223
  c0:	86 b9       	out	0x06, r24	; 6
	
	//Disable ADC Interrupt
	CLR_BIT(ADCSRA_REG, ADIE);
  c2:	86 b1       	in	r24, 0x06	; 6
  c4:	87 7f       	andi	r24, 0xF7	; 247
  c6:	86 b9       	out	0x06, r24	; 6
	
	// Prescaler 128 For 16MHZ (125 KHZ)
	SET_BIT(ADCSRA_REG, ADPS0);
  c8:	86 b1       	in	r24, 0x06	; 6
  ca:	81 60       	ori	r24, 0x01	; 1
  cc:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA_REG, ADPS1);
  ce:	86 b1       	in	r24, 0x06	; 6
  d0:	82 60       	ori	r24, 0x02	; 2
  d2:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA_REG, ADPS2);
  d4:	86 b1       	in	r24, 0x06	; 6
  d6:	84 60       	ori	r24, 0x04	; 4
  d8:	86 b9       	out	0x06, r24	; 6
	
	// ADC Enable
	SET_BIT(ADCSRA_REG, ADEN);
  da:	86 b1       	in	r24, 0x06	; 6
  dc:	80 68       	ori	r24, 0x80	; 128
  de:	86 b9       	out	0x06, r24	; 6
  e0:	08 95       	ret

000000e2 <ADC_voidGetDigitalValue>:
}


void ADC_voidGetDigitalValue(u8 copy_u8ChannelId, u16* copy_pu16DigitalValue)
{
	if((copy_pu16DigitalValue != NULL) && (copy_u8ChannelId < 32))
  e2:	61 15       	cp	r22, r1
  e4:	71 05       	cpc	r23, r1
  e6:	a9 f0       	breq	.+42     	; 0x112 <ADC_voidGetDigitalValue+0x30>
  e8:	80 32       	cpi	r24, 0x20	; 32
  ea:	98 f4       	brcc	.+38     	; 0x112 <ADC_voidGetDigitalValue+0x30>
	{
		//Clear ADMUX Channel Bits
		ADMUX_REG &= 0xE0; //0b11100000
  ec:	97 b1       	in	r25, 0x07	; 7
  ee:	90 7e       	andi	r25, 0xE0	; 224
  f0:	97 b9       	out	0x07, r25	; 7
		
		// Select Channel Number
		ADMUX_REG |= copy_u8ChannelId;
  f2:	97 b1       	in	r25, 0x07	; 7
  f4:	89 2b       	or	r24, r25
  f6:	87 b9       	out	0x07, r24	; 7
		
		// Start conversion
		SET_BIT(ADCSRA_REG, ADSC);
  f8:	86 b1       	in	r24, 0x06	; 6
  fa:	80 64       	ori	r24, 0x40	; 64
  fc:	86 b9       	out	0x06, r24	; 6
		
		// Busy Wait for ADC Flag
		while(0 == GET_BIT(ADCSRA_REG ,ADIF));
  fe:	34 9b       	sbis	0x06, 4	; 6
 100:	fe cf       	rjmp	.-4      	; 0xfe <ADC_voidGetDigitalValue+0x1c>
		
		// Clear ADC flag (WROC >> Write One to Clear)
		SET_BIT(ADCSRA_REG ,ADIF);
 102:	86 b1       	in	r24, 0x06	; 6
 104:	80 61       	ori	r24, 0x10	; 16
 106:	86 b9       	out	0x06, r24	; 6
		
		// Pass out ADC data 
		*copy_pu16DigitalValue = ADC_u16_REG;
 108:	84 b1       	in	r24, 0x04	; 4
 10a:	95 b1       	in	r25, 0x05	; 5
 10c:	fb 01       	movw	r30, r22
 10e:	91 83       	std	Z+1, r25	; 0x01
 110:	80 83       	st	Z, r24
 112:	08 95       	ret

00000114 <DIO_voidSetPinDirection>:
#include "DIO_register.h"


void DIO_voidSetPinDirection(u8 copy_u8PortId, u8 copy_u8PinId, u8 copy_u8PinDirection)
{
	switch(copy_u8PortId)
 114:	81 30       	cpi	r24, 0x01	; 1
 116:	19 f1       	breq	.+70     	; 0x15e <DIO_voidSetPinDirection+0x4a>
 118:	30 f0       	brcs	.+12     	; 0x126 <DIO_voidSetPinDirection+0x12>
 11a:	82 30       	cpi	r24, 0x02	; 2
 11c:	e1 f1       	breq	.+120    	; 0x196 <DIO_voidSetPinDirection+0x82>
 11e:	83 30       	cpi	r24, 0x03	; 3
 120:	09 f4       	brne	.+2      	; 0x124 <DIO_voidSetPinDirection+0x10>
 122:	55 c0       	rjmp	.+170    	; 0x1ce <DIO_voidSetPinDirection+0xba>
 124:	08 95       	ret
	{
		case DIO_PORTA:
		switch(copy_u8PinDirection)
 126:	44 23       	and	r20, r20
 128:	19 f0       	breq	.+6      	; 0x130 <DIO_voidSetPinDirection+0x1c>
 12a:	41 30       	cpi	r20, 0x01	; 1
 12c:	69 f0       	breq	.+26     	; 0x148 <DIO_voidSetPinDirection+0x34>
 12e:	08 95       	ret
		{
			case DIO_PIN_INPUT:
			CLR_BIT(DDRA_REG, copy_u8PinId);
 130:	2a b3       	in	r18, 0x1a	; 26
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	02 c0       	rjmp	.+4      	; 0x13c <DIO_voidSetPinDirection+0x28>
 138:	88 0f       	add	r24, r24
 13a:	99 1f       	adc	r25, r25
 13c:	6a 95       	dec	r22
 13e:	e2 f7       	brpl	.-8      	; 0x138 <DIO_voidSetPinDirection+0x24>
 140:	80 95       	com	r24
 142:	82 23       	and	r24, r18
 144:	8a bb       	out	0x1a, r24	; 26
			break;
 146:	08 95       	ret
			
			case DIO_PIN_OUTPUT:
			SET_BIT(DDRA_REG, copy_u8PinId);
 148:	2a b3       	in	r18, 0x1a	; 26
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	02 c0       	rjmp	.+4      	; 0x154 <DIO_voidSetPinDirection+0x40>
 150:	88 0f       	add	r24, r24
 152:	99 1f       	adc	r25, r25
 154:	6a 95       	dec	r22
 156:	e2 f7       	brpl	.-8      	; 0x150 <DIO_voidSetPinDirection+0x3c>
 158:	82 2b       	or	r24, r18
 15a:	8a bb       	out	0x1a, r24	; 26
			break;
 15c:	08 95       	ret
		}
		break;
		
		case DIO_PORTB:
		switch(copy_u8PinDirection)
 15e:	44 23       	and	r20, r20
 160:	19 f0       	breq	.+6      	; 0x168 <DIO_voidSetPinDirection+0x54>
 162:	41 30       	cpi	r20, 0x01	; 1
 164:	69 f0       	breq	.+26     	; 0x180 <DIO_voidSetPinDirection+0x6c>
 166:	08 95       	ret
		{
			case DIO_PIN_INPUT:
			CLR_BIT(DDRB_REG, copy_u8PinId);
 168:	27 b3       	in	r18, 0x17	; 23
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	02 c0       	rjmp	.+4      	; 0x174 <DIO_voidSetPinDirection+0x60>
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	6a 95       	dec	r22
 176:	e2 f7       	brpl	.-8      	; 0x170 <DIO_voidSetPinDirection+0x5c>
 178:	80 95       	com	r24
 17a:	82 23       	and	r24, r18
 17c:	87 bb       	out	0x17, r24	; 23
			break;
 17e:	08 95       	ret
			
			case DIO_PIN_OUTPUT:
			SET_BIT(DDRB_REG, copy_u8PinId);
 180:	27 b3       	in	r18, 0x17	; 23
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_voidSetPinDirection+0x78>
 188:	88 0f       	add	r24, r24
 18a:	99 1f       	adc	r25, r25
 18c:	6a 95       	dec	r22
 18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_voidSetPinDirection+0x74>
 190:	82 2b       	or	r24, r18
 192:	87 bb       	out	0x17, r24	; 23
			break;
 194:	08 95       	ret
		}
		break;
		
		case DIO_PORTC:
		switch(copy_u8PinDirection)
 196:	44 23       	and	r20, r20
 198:	19 f0       	breq	.+6      	; 0x1a0 <DIO_voidSetPinDirection+0x8c>
 19a:	41 30       	cpi	r20, 0x01	; 1
 19c:	69 f0       	breq	.+26     	; 0x1b8 <DIO_voidSetPinDirection+0xa4>
 19e:	08 95       	ret
		{
			case DIO_PIN_INPUT:
			CLR_BIT(DDRC_REG, copy_u8PinId);
 1a0:	24 b3       	in	r18, 0x14	; 20
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <DIO_voidSetPinDirection+0x98>
 1a8:	88 0f       	add	r24, r24
 1aa:	99 1f       	adc	r25, r25
 1ac:	6a 95       	dec	r22
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <DIO_voidSetPinDirection+0x94>
 1b0:	80 95       	com	r24
 1b2:	82 23       	and	r24, r18
 1b4:	84 bb       	out	0x14, r24	; 20
			break;
 1b6:	08 95       	ret
			
			case DIO_PIN_OUTPUT:
			SET_BIT(DDRC_REG, copy_u8PinId);
 1b8:	24 b3       	in	r18, 0x14	; 20
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <DIO_voidSetPinDirection+0xb0>
 1c0:	88 0f       	add	r24, r24
 1c2:	99 1f       	adc	r25, r25
 1c4:	6a 95       	dec	r22
 1c6:	e2 f7       	brpl	.-8      	; 0x1c0 <DIO_voidSetPinDirection+0xac>
 1c8:	82 2b       	or	r24, r18
 1ca:	84 bb       	out	0x14, r24	; 20
			break;
 1cc:	08 95       	ret
		}
		break;
		
		case DIO_PORTD:
		switch(copy_u8PinDirection)
 1ce:	44 23       	and	r20, r20
 1d0:	19 f0       	breq	.+6      	; 0x1d8 <DIO_voidSetPinDirection+0xc4>
 1d2:	41 30       	cpi	r20, 0x01	; 1
 1d4:	69 f0       	breq	.+26     	; 0x1f0 <DIO_voidSetPinDirection+0xdc>
 1d6:	08 95       	ret
		{
			case DIO_PIN_INPUT:
			CLR_BIT(DDRD_REG, copy_u8PinId);
 1d8:	21 b3       	in	r18, 0x11	; 17
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <DIO_voidSetPinDirection+0xd0>
 1e0:	88 0f       	add	r24, r24
 1e2:	99 1f       	adc	r25, r25
 1e4:	6a 95       	dec	r22
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <DIO_voidSetPinDirection+0xcc>
 1e8:	80 95       	com	r24
 1ea:	82 23       	and	r24, r18
 1ec:	81 bb       	out	0x11, r24	; 17
			break;
 1ee:	08 95       	ret
			
			case DIO_PIN_OUTPUT:
			SET_BIT(DDRD_REG, copy_u8PinId);
 1f0:	21 b3       	in	r18, 0x11	; 17
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <DIO_voidSetPinDirection+0xe8>
 1f8:	88 0f       	add	r24, r24
 1fa:	99 1f       	adc	r25, r25
 1fc:	6a 95       	dec	r22
 1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <DIO_voidSetPinDirection+0xe4>
 200:	82 2b       	or	r24, r18
 202:	81 bb       	out	0x11, r24	; 17
 204:	08 95       	ret

00000206 <DIO_voidSetPinValue>:
}


void DIO_voidSetPinValue(u8 copy_u8PortId, u8 copy_u8PinId, u8 copy_u8PinValue)
{
	switch(copy_u8PortId)
 206:	81 30       	cpi	r24, 0x01	; 1
 208:	19 f1       	breq	.+70     	; 0x250 <DIO_voidSetPinValue+0x4a>
 20a:	30 f0       	brcs	.+12     	; 0x218 <DIO_voidSetPinValue+0x12>
 20c:	82 30       	cpi	r24, 0x02	; 2
 20e:	e1 f1       	breq	.+120    	; 0x288 <DIO_voidSetPinValue+0x82>
 210:	83 30       	cpi	r24, 0x03	; 3
 212:	09 f4       	brne	.+2      	; 0x216 <DIO_voidSetPinValue+0x10>
 214:	55 c0       	rjmp	.+170    	; 0x2c0 <DIO_voidSetPinValue+0xba>
 216:	08 95       	ret
	{
		case DIO_PORTA:
		switch(copy_u8PinValue)
 218:	44 23       	and	r20, r20
 21a:	19 f0       	breq	.+6      	; 0x222 <DIO_voidSetPinValue+0x1c>
 21c:	41 30       	cpi	r20, 0x01	; 1
 21e:	69 f0       	breq	.+26     	; 0x23a <DIO_voidSetPinValue+0x34>
 220:	08 95       	ret
		{
			case DIO_PIN_LOW:
			CLR_BIT(PORTA_REG, copy_u8PinId);
 222:	2b b3       	in	r18, 0x1b	; 27
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	02 c0       	rjmp	.+4      	; 0x22e <DIO_voidSetPinValue+0x28>
 22a:	88 0f       	add	r24, r24
 22c:	99 1f       	adc	r25, r25
 22e:	6a 95       	dec	r22
 230:	e2 f7       	brpl	.-8      	; 0x22a <DIO_voidSetPinValue+0x24>
 232:	80 95       	com	r24
 234:	82 23       	and	r24, r18
 236:	8b bb       	out	0x1b, r24	; 27
			break;
 238:	08 95       	ret
			
			case DIO_PIN_HIGH:
			SET_BIT(PORTA_REG, copy_u8PinId);
 23a:	2b b3       	in	r18, 0x1b	; 27
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	02 c0       	rjmp	.+4      	; 0x246 <DIO_voidSetPinValue+0x40>
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	6a 95       	dec	r22
 248:	e2 f7       	brpl	.-8      	; 0x242 <DIO_voidSetPinValue+0x3c>
 24a:	82 2b       	or	r24, r18
 24c:	8b bb       	out	0x1b, r24	; 27
			break;
 24e:	08 95       	ret
		}
		break;
		
		case DIO_PORTB:
		switch(copy_u8PinValue)
 250:	44 23       	and	r20, r20
 252:	19 f0       	breq	.+6      	; 0x25a <DIO_voidSetPinValue+0x54>
 254:	41 30       	cpi	r20, 0x01	; 1
 256:	69 f0       	breq	.+26     	; 0x272 <DIO_voidSetPinValue+0x6c>
 258:	08 95       	ret
		{
			case DIO_PIN_LOW:
			CLR_BIT(PORTB_REG, copy_u8PinId);
 25a:	28 b3       	in	r18, 0x18	; 24
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	02 c0       	rjmp	.+4      	; 0x266 <DIO_voidSetPinValue+0x60>
 262:	88 0f       	add	r24, r24
 264:	99 1f       	adc	r25, r25
 266:	6a 95       	dec	r22
 268:	e2 f7       	brpl	.-8      	; 0x262 <DIO_voidSetPinValue+0x5c>
 26a:	80 95       	com	r24
 26c:	82 23       	and	r24, r18
 26e:	88 bb       	out	0x18, r24	; 24
			break;
 270:	08 95       	ret
			
			case DIO_PIN_HIGH:
			SET_BIT(PORTB_REG, copy_u8PinId);
 272:	28 b3       	in	r18, 0x18	; 24
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	02 c0       	rjmp	.+4      	; 0x27e <DIO_voidSetPinValue+0x78>
 27a:	88 0f       	add	r24, r24
 27c:	99 1f       	adc	r25, r25
 27e:	6a 95       	dec	r22
 280:	e2 f7       	brpl	.-8      	; 0x27a <DIO_voidSetPinValue+0x74>
 282:	82 2b       	or	r24, r18
 284:	88 bb       	out	0x18, r24	; 24
			break;
 286:	08 95       	ret
		}
		break;
		
		case DIO_PORTC:
		switch(copy_u8PinValue)
 288:	44 23       	and	r20, r20
 28a:	19 f0       	breq	.+6      	; 0x292 <DIO_voidSetPinValue+0x8c>
 28c:	41 30       	cpi	r20, 0x01	; 1
 28e:	69 f0       	breq	.+26     	; 0x2aa <DIO_voidSetPinValue+0xa4>
 290:	08 95       	ret
		{
			case DIO_PIN_LOW:
			CLR_BIT(PORTC_REG, copy_u8PinId);
 292:	25 b3       	in	r18, 0x15	; 21
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	02 c0       	rjmp	.+4      	; 0x29e <DIO_voidSetPinValue+0x98>
 29a:	88 0f       	add	r24, r24
 29c:	99 1f       	adc	r25, r25
 29e:	6a 95       	dec	r22
 2a0:	e2 f7       	brpl	.-8      	; 0x29a <DIO_voidSetPinValue+0x94>
 2a2:	80 95       	com	r24
 2a4:	82 23       	and	r24, r18
 2a6:	85 bb       	out	0x15, r24	; 21
			break;
 2a8:	08 95       	ret
			
			case DIO_PIN_HIGH:
			SET_BIT(PORTC_REG, copy_u8PinId);
 2aa:	25 b3       	in	r18, 0x15	; 21
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <DIO_voidSetPinValue+0xb0>
 2b2:	88 0f       	add	r24, r24
 2b4:	99 1f       	adc	r25, r25
 2b6:	6a 95       	dec	r22
 2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <DIO_voidSetPinValue+0xac>
 2ba:	82 2b       	or	r24, r18
 2bc:	85 bb       	out	0x15, r24	; 21
			break;
 2be:	08 95       	ret
		}
		break;
		
		case DIO_PORTD:
		switch(copy_u8PinValue)
 2c0:	44 23       	and	r20, r20
 2c2:	19 f0       	breq	.+6      	; 0x2ca <DIO_voidSetPinValue+0xc4>
 2c4:	41 30       	cpi	r20, 0x01	; 1
 2c6:	69 f0       	breq	.+26     	; 0x2e2 <DIO_voidSetPinValue+0xdc>
 2c8:	08 95       	ret
		{
			case DIO_PIN_LOW:
			CLR_BIT(PORTD_REG, copy_u8PinId);
 2ca:	22 b3       	in	r18, 0x12	; 18
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <DIO_voidSetPinValue+0xd0>
 2d2:	88 0f       	add	r24, r24
 2d4:	99 1f       	adc	r25, r25
 2d6:	6a 95       	dec	r22
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <DIO_voidSetPinValue+0xcc>
 2da:	80 95       	com	r24
 2dc:	82 23       	and	r24, r18
 2de:	82 bb       	out	0x12, r24	; 18
			break;
 2e0:	08 95       	ret
			
			case DIO_PIN_HIGH:
			SET_BIT(PORTD_REG, copy_u8PinId);
 2e2:	22 b3       	in	r18, 0x12	; 18
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	02 c0       	rjmp	.+4      	; 0x2ee <DIO_voidSetPinValue+0xe8>
 2ea:	88 0f       	add	r24, r24
 2ec:	99 1f       	adc	r25, r25
 2ee:	6a 95       	dec	r22
 2f0:	e2 f7       	brpl	.-8      	; 0x2ea <DIO_voidSetPinValue+0xe4>
 2f2:	82 2b       	or	r24, r18
 2f4:	82 bb       	out	0x12, r24	; 18
 2f6:	08 95       	ret

000002f8 <PRV_voidWriteHalfPort>:
	DIO_voidSetPinValue(LCD_E_PORT, LCD_E_PIN, DIO_PIN_LOW);
}


static void PRV_voidWriteHalfPort(u8 copy_u8Value)
{
 2f8:	cf 93       	push	r28
 2fa:	c8 2f       	mov	r28, r24
	DIO_voidSetPinValue(LCD_D4_PORT, LCD_D4_PIN, GET_BIT(copy_u8Value, 0));
 2fc:	48 2f       	mov	r20, r24
 2fe:	41 70       	andi	r20, 0x01	; 1
 300:	64 e0       	ldi	r22, 0x04	; 4
 302:	80 e0       	ldi	r24, 0x00	; 0
 304:	0e 94 03 01 	call	0x206	; 0x206 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_D5_PORT, LCD_D5_PIN, GET_BIT(copy_u8Value, 1));
 308:	c1 fb       	bst	r28, 1
 30a:	44 27       	eor	r20, r20
 30c:	40 f9       	bld	r20, 0
 30e:	65 e0       	ldi	r22, 0x05	; 5
 310:	80 e0       	ldi	r24, 0x00	; 0
 312:	0e 94 03 01 	call	0x206	; 0x206 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_D6_PORT, LCD_D6_PIN, GET_BIT(copy_u8Value, 2));
 316:	c2 fb       	bst	r28, 2
 318:	44 27       	eor	r20, r20
 31a:	40 f9       	bld	r20, 0
 31c:	66 e0       	ldi	r22, 0x06	; 6
 31e:	80 e0       	ldi	r24, 0x00	; 0
 320:	0e 94 03 01 	call	0x206	; 0x206 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_D7_PORT, LCD_D7_PIN, GET_BIT(copy_u8Value, 3));
 324:	c3 fb       	bst	r28, 3
 326:	44 27       	eor	r20, r20
 328:	40 f9       	bld	r20, 0
 32a:	67 e0       	ldi	r22, 0x07	; 7
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	0e 94 03 01 	call	0x206	; 0x206 <DIO_voidSetPinValue>
 332:	cf 91       	pop	r28
 334:	08 95       	ret

00000336 <PRV_voidEnableTriggerWrite>:


static void PRV_voidEnableTriggerWrite(void)
{
	/* Enable Pulse *//* H => L */
	DIO_voidSetPinValue(LCD_E_PORT, LCD_E_PIN, DIO_PIN_HIGH);
 336:	41 e0       	ldi	r20, 0x01	; 1
 338:	63 e0       	ldi	r22, 0x03	; 3
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	0e 94 03 01 	call	0x206	; 0x206 <DIO_voidSetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 340:	8f e9       	ldi	r24, 0x9F	; 159
 342:	9f e0       	ldi	r25, 0x0F	; 15
 344:	01 97       	sbiw	r24, 0x01	; 1
 346:	f1 f7       	brne	.-4      	; 0x344 <PRV_voidEnableTriggerWrite+0xe>
 348:	00 c0       	rjmp	.+0      	; 0x34a <PRV_voidEnableTriggerWrite+0x14>
 34a:	00 00       	nop
	_delay_ms(1);	
	DIO_voidSetPinValue(LCD_E_PORT, LCD_E_PIN, DIO_PIN_LOW);
 34c:	40 e0       	ldi	r20, 0x00	; 0
 34e:	63 e0       	ldi	r22, 0x03	; 3
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	0e 94 03 01 	call	0x206	; 0x206 <DIO_voidSetPinValue>
 356:	08 95       	ret

00000358 <LCD_voidSendCommand>:
	LCD_voidSendCommand(0b00000110);
}


void LCD_voidSendCommand(u8 copy_u8cmnd) 
{
 358:	cf 93       	push	r28
 35a:	c8 2f       	mov	r28, r24
	// Select write operation (R/W = 0)
	DIO_voidSetPinValue(LCD_RW_PORT, LCD_RW_PIN, DIO_PIN_LOW);	
 35c:	40 e0       	ldi	r20, 0x00	; 0
 35e:	62 e0       	ldi	r22, 0x02	; 2
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	0e 94 03 01 	call	0x206	; 0x206 <DIO_voidSetPinValue>
	
	// Select Instruction Register[command] (RS = 0)
	DIO_voidSetPinValue(LCD_RS_PORT, LCD_RS_PIN, DIO_PIN_LOW);
 366:	40 e0       	ldi	r20, 0x00	; 0
 368:	61 e0       	ldi	r22, 0x01	; 1
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	0e 94 03 01 	call	0x206	; 0x206 <DIO_voidSetPinValue>
	
	// Write The Most 4 bits Of command on Data Pins
	PRV_voidWriteHalfPort(copy_u8cmnd >> 4);
 370:	8c 2f       	mov	r24, r28
 372:	82 95       	swap	r24
 374:	8f 70       	andi	r24, 0x0F	; 15
 376:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <PRV_voidWriteHalfPort>
	
	/* Enable */
	PRV_voidEnableTriggerWrite();
 37a:	0e 94 9b 01 	call	0x336	; 0x336 <PRV_voidEnableTriggerWrite>
	
	// Write The Least 4 bits Of command on Data Pins
	PRV_voidWriteHalfPort(copy_u8cmnd);
 37e:	8c 2f       	mov	r24, r28
 380:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <PRV_voidWriteHalfPort>
	
	/* Enable */
	PRV_voidEnableTriggerWrite();
 384:	0e 94 9b 01 	call	0x336	; 0x336 <PRV_voidEnableTriggerWrite>
}
 388:	cf 91       	pop	r28
 38a:	08 95       	ret

0000038c <LCD_voidInit>:
#include "LCD_private.h"


void LCD_voidInit(void)
{
	DIO_voidSetPinDirection(LCD_D4_PORT, LCD_D4_PIN, DIO_PIN_OUTPUT);
 38c:	41 e0       	ldi	r20, 0x01	; 1
 38e:	64 e0       	ldi	r22, 0x04	; 4
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	0e 94 8a 00 	call	0x114	; 0x114 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_D5_PORT, LCD_D5_PIN, DIO_PIN_OUTPUT);
 396:	41 e0       	ldi	r20, 0x01	; 1
 398:	65 e0       	ldi	r22, 0x05	; 5
 39a:	80 e0       	ldi	r24, 0x00	; 0
 39c:	0e 94 8a 00 	call	0x114	; 0x114 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_D6_PORT, LCD_D6_PIN, DIO_PIN_OUTPUT);
 3a0:	41 e0       	ldi	r20, 0x01	; 1
 3a2:	66 e0       	ldi	r22, 0x06	; 6
 3a4:	80 e0       	ldi	r24, 0x00	; 0
 3a6:	0e 94 8a 00 	call	0x114	; 0x114 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_D7_PORT, LCD_D7_PIN, DIO_PIN_OUTPUT);
 3aa:	41 e0       	ldi	r20, 0x01	; 1
 3ac:	67 e0       	ldi	r22, 0x07	; 7
 3ae:	80 e0       	ldi	r24, 0x00	; 0
 3b0:	0e 94 8a 00 	call	0x114	; 0x114 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_RW_PORT, LCD_RW_PIN, DIO_PIN_OUTPUT);
 3b4:	41 e0       	ldi	r20, 0x01	; 1
 3b6:	62 e0       	ldi	r22, 0x02	; 2
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	0e 94 8a 00 	call	0x114	; 0x114 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_RS_PORT, LCD_RS_PIN, DIO_PIN_OUTPUT);
 3be:	41 e0       	ldi	r20, 0x01	; 1
 3c0:	61 e0       	ldi	r22, 0x01	; 1
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	0e 94 8a 00 	call	0x114	; 0x114 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_E_PORT,  LCD_E_PIN,  DIO_PIN_OUTPUT);
 3c8:	41 e0       	ldi	r20, 0x01	; 1
 3ca:	63 e0       	ldi	r22, 0x03	; 3
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	0e 94 8a 00 	call	0x114	; 0x114 <DIO_voidSetPinDirection>
 3d2:	2f ef       	ldi	r18, 0xFF	; 255
 3d4:	83 ef       	ldi	r24, 0xF3	; 243
 3d6:	91 e0       	ldi	r25, 0x01	; 1
 3d8:	21 50       	subi	r18, 0x01	; 1
 3da:	80 40       	sbci	r24, 0x00	; 0
 3dc:	90 40       	sbci	r25, 0x00	; 0
 3de:	e1 f7       	brne	.-8      	; 0x3d8 <LCD_voidInit+0x4c>
 3e0:	00 c0       	rjmp	.+0      	; 0x3e2 <LCD_voidInit+0x56>
 3e2:	00 00       	nop
	
	_delay_ms(40);
	
	/* Function Set (2Lines, 5*7 font) */
	// Select write operation (R/W = 0)
	DIO_voidSetPinValue(LCD_RW_PORT, LCD_RW_PIN, DIO_PIN_LOW);
 3e4:	40 e0       	ldi	r20, 0x00	; 0
 3e6:	62 e0       	ldi	r22, 0x02	; 2
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	0e 94 03 01 	call	0x206	; 0x206 <DIO_voidSetPinValue>
	// Select Instruction Register[command] (RS = 0)
	DIO_voidSetPinValue(LCD_RS_PORT, LCD_RS_PIN, DIO_PIN_LOW);
 3ee:	40 e0       	ldi	r20, 0x00	; 0
 3f0:	61 e0       	ldi	r22, 0x01	; 1
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	0e 94 03 01 	call	0x206	; 0x206 <DIO_voidSetPinValue>
	PRV_voidWriteHalfPort(0b0010);
 3f8:	82 e0       	ldi	r24, 0x02	; 2
 3fa:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <PRV_voidWriteHalfPort>
	/* Enable */
	PRV_voidEnableTriggerWrite();
 3fe:	0e 94 9b 01 	call	0x336	; 0x336 <PRV_voidEnableTriggerWrite>
	LCD_voidSendCommand(0b00101000);
 402:	88 e2       	ldi	r24, 0x28	; 40
 404:	0e 94 ac 01 	call	0x358	; 0x358 <LCD_voidSendCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 408:	20 ef       	ldi	r18, 0xF0	; 240
 40a:	2a 95       	dec	r18
 40c:	f1 f7       	brne	.-4      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
	_delay_us(45);
	
	/* Display On/Off Control (DisplayOn, CursorOn, BlinkOn) */
	LCD_voidSendCommand(0b00001111);
 40e:	8f e0       	ldi	r24, 0x0F	; 15
 410:	0e 94 ac 01 	call	0x358	; 0x358 <LCD_voidSendCommand>
 414:	80 ef       	ldi	r24, 0xF0	; 240
 416:	8a 95       	dec	r24
 418:	f1 f7       	brne	.-4      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
	_delay_us(45);
	
	/* Display Clear */
	LCD_voidSendCommand(0b00000001);
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	0e 94 ac 01 	call	0x358	; 0x358 <LCD_voidSendCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 420:	8f e3       	ldi	r24, 0x3F	; 63
 422:	9f e1       	ldi	r25, 0x1F	; 31
 424:	01 97       	sbiw	r24, 0x01	; 1
 426:	f1 f7       	brne	.-4      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 428:	00 c0       	rjmp	.+0      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 42a:	00 00       	nop
	_delay_ms(2);
	
	/* Entry Mode Set (IncrementOn, ShiftOff) */
	LCD_voidSendCommand(0b00000110);
 42c:	86 e0       	ldi	r24, 0x06	; 6
 42e:	0e 94 ac 01 	call	0x358	; 0x358 <LCD_voidSendCommand>
 432:	08 95       	ret

00000434 <LCD_voidDisplayChar>:
	PRV_voidEnableTriggerWrite();
}


void LCD_voidDisplayChar(u8 copy_u8Data)
{
 434:	cf 93       	push	r28
 436:	c8 2f       	mov	r28, r24
	// Select write operation (R/W = 0)
	DIO_voidSetPinValue(LCD_RW_PORT, LCD_RW_PIN, DIO_PIN_LOW);
 438:	40 e0       	ldi	r20, 0x00	; 0
 43a:	62 e0       	ldi	r22, 0x02	; 2
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	0e 94 03 01 	call	0x206	; 0x206 <DIO_voidSetPinValue>
	
	// Select Data Register[data] (RS = 1)
	DIO_voidSetPinValue(LCD_RS_PORT, LCD_RS_PIN, DIO_PIN_HIGH);
 442:	41 e0       	ldi	r20, 0x01	; 1
 444:	61 e0       	ldi	r22, 0x01	; 1
 446:	81 e0       	ldi	r24, 0x01	; 1
 448:	0e 94 03 01 	call	0x206	; 0x206 <DIO_voidSetPinValue>
	
	// Write The Most 4 bits Of data on Data Pins
	PRV_voidWriteHalfPort(copy_u8Data >> 4);
 44c:	8c 2f       	mov	r24, r28
 44e:	82 95       	swap	r24
 450:	8f 70       	andi	r24, 0x0F	; 15
 452:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <PRV_voidWriteHalfPort>
	
	/* Enable */
	PRV_voidEnableTriggerWrite();
 456:	0e 94 9b 01 	call	0x336	; 0x336 <PRV_voidEnableTriggerWrite>
	
	// Write The Least 4 bits Of data on Data Pins
	PRV_voidWriteHalfPort(copy_u8Data);
 45a:	8c 2f       	mov	r24, r28
 45c:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <PRV_voidWriteHalfPort>
	
	/* Enable */
	PRV_voidEnableTriggerWrite();
 460:	0e 94 9b 01 	call	0x336	; 0x336 <PRV_voidEnableTriggerWrite>
}
 464:	cf 91       	pop	r28
 466:	08 95       	ret

00000468 <LCD_voidDisplayString>:


void LCD_voidDisplayString(u8* copy_Pu8String)
{
 468:	0f 93       	push	r16
 46a:	1f 93       	push	r17
 46c:	cf 93       	push	r28
	if(copy_Pu8String != NULL)
 46e:	00 97       	sbiw	r24, 0x00	; 0
 470:	29 f4       	brne	.+10     	; 0x47c <LCD_voidDisplayString+0x14>
 472:	0c c0       	rjmp	.+24     	; 0x48c <LCD_voidDisplayString+0x24>
	{
		u8 local_u8Counter = 0;
		while(copy_Pu8String[local_u8Counter] != '\0')
		{
			LCD_voidDisplayChar(copy_Pu8String[local_u8Counter]);
 474:	0e 94 1a 02 	call	0x434	; 0x434 <LCD_voidDisplayChar>
			local_u8Counter++;
 478:	cf 5f       	subi	r28, 0xFF	; 255
 47a:	02 c0       	rjmp	.+4      	; 0x480 <LCD_voidDisplayString+0x18>
 47c:	8c 01       	movw	r16, r24
 47e:	c0 e0       	ldi	r28, 0x00	; 0
void LCD_voidDisplayString(u8* copy_Pu8String)
{
	if(copy_Pu8String != NULL)
	{
		u8 local_u8Counter = 0;
		while(copy_Pu8String[local_u8Counter] != '\0')
 480:	f8 01       	movw	r30, r16
 482:	ec 0f       	add	r30, r28
 484:	f1 1d       	adc	r31, r1
 486:	80 81       	ld	r24, Z
 488:	81 11       	cpse	r24, r1
 48a:	f4 cf       	rjmp	.-24     	; 0x474 <LCD_voidDisplayString+0xc>
	}
	else
	{
		// return Error State
	}
}
 48c:	cf 91       	pop	r28
 48e:	1f 91       	pop	r17
 490:	0f 91       	pop	r16
 492:	08 95       	ret

00000494 <LCD_voidDisplayNumber>:


void LCD_voidDisplayNumber(u32 copy_u32Number) //79
{
 494:	cf 92       	push	r12
 496:	df 92       	push	r13
 498:	ef 92       	push	r14
 49a:	ff 92       	push	r15
 49c:	0f 93       	push	r16
 49e:	1f 93       	push	r17
 4a0:	8b 01       	movw	r16, r22
 4a2:	9c 01       	movw	r18, r24
	u32 local_u32ReversedNumber = 1;
	if(copy_u32Number == 0)
 4a4:	67 2b       	or	r22, r23
 4a6:	68 2b       	or	r22, r24
 4a8:	69 2b       	or	r22, r25
 4aa:	49 f5       	brne	.+82     	; 0x4fe <LCD_voidDisplayNumber+0x6a>
	{
		LCD_voidDisplayChar('0');
 4ac:	80 e3       	ldi	r24, 0x30	; 48
 4ae:	0e 94 1a 02 	call	0x434	; 0x434 <LCD_voidDisplayChar>
 4b2:	45 c0       	rjmp	.+138    	; 0x53e <LCD_voidDisplayNumber+0xaa>
	}
	else
	{
		while(copy_u32Number != 0)
		{
			local_u32ReversedNumber = (local_u32ReversedNumber * 10)+ (copy_u32Number % 10);//197
 4b4:	dc 01       	movw	r26, r24
 4b6:	cb 01       	movw	r24, r22
 4b8:	88 0f       	add	r24, r24
 4ba:	99 1f       	adc	r25, r25
 4bc:	aa 1f       	adc	r26, r26
 4be:	bb 1f       	adc	r27, r27
 4c0:	6c 01       	movw	r12, r24
 4c2:	7d 01       	movw	r14, r26
 4c4:	cc 0c       	add	r12, r12
 4c6:	dd 1c       	adc	r13, r13
 4c8:	ee 1c       	adc	r14, r14
 4ca:	ff 1c       	adc	r15, r15
 4cc:	cc 0c       	add	r12, r12
 4ce:	dd 1c       	adc	r13, r13
 4d0:	ee 1c       	adc	r14, r14
 4d2:	ff 1c       	adc	r15, r15
 4d4:	c8 0e       	add	r12, r24
 4d6:	d9 1e       	adc	r13, r25
 4d8:	ea 1e       	adc	r14, r26
 4da:	fb 1e       	adc	r15, r27
 4dc:	c9 01       	movw	r24, r18
 4de:	b8 01       	movw	r22, r16
 4e0:	2a e0       	ldi	r18, 0x0A	; 10
 4e2:	30 e0       	ldi	r19, 0x00	; 0
 4e4:	40 e0       	ldi	r20, 0x00	; 0
 4e6:	50 e0       	ldi	r21, 0x00	; 0
 4e8:	0e 94 ac 03 	call	0x758	; 0x758 <__udivmodsi4>
 4ec:	6c 0d       	add	r22, r12
 4ee:	7d 1d       	adc	r23, r13
 4f0:	8e 1d       	adc	r24, r14
 4f2:	9f 1d       	adc	r25, r15
			copy_u32Number /= 10;
 4f4:	02 2f       	mov	r16, r18
 4f6:	13 2f       	mov	r17, r19
 4f8:	24 2f       	mov	r18, r20
 4fa:	35 2f       	mov	r19, r21
 4fc:	04 c0       	rjmp	.+8      	; 0x506 <LCD_voidDisplayNumber+0x72>
 4fe:	61 e0       	ldi	r22, 0x01	; 1
 500:	70 e0       	ldi	r23, 0x00	; 0
 502:	80 e0       	ldi	r24, 0x00	; 0
 504:	90 e0       	ldi	r25, 0x00	; 0
	{
		LCD_voidDisplayChar('0');
	}
	else
	{
		while(copy_u32Number != 0)
 506:	01 15       	cp	r16, r1
 508:	11 05       	cpc	r17, r1
 50a:	21 05       	cpc	r18, r1
 50c:	31 05       	cpc	r19, r1
 50e:	91 f6       	brne	.-92     	; 0x4b4 <LCD_voidDisplayNumber+0x20>
			copy_u32Number /= 10;
		}
		
		do 
		{
			LCD_voidDisplayChar((local_u32ReversedNumber % 10) + '0');
 510:	2a e0       	ldi	r18, 0x0A	; 10
 512:	30 e0       	ldi	r19, 0x00	; 0
 514:	40 e0       	ldi	r20, 0x00	; 0
 516:	50 e0       	ldi	r21, 0x00	; 0
 518:	0e 94 ac 03 	call	0x758	; 0x758 <__udivmodsi4>
 51c:	e2 2e       	mov	r14, r18
 51e:	f3 2e       	mov	r15, r19
 520:	04 2f       	mov	r16, r20
 522:	15 2f       	mov	r17, r21
 524:	80 e3       	ldi	r24, 0x30	; 48
 526:	86 0f       	add	r24, r22
 528:	0e 94 1a 02 	call	0x434	; 0x434 <LCD_voidDisplayChar>
			local_u32ReversedNumber /= 10; 
 52c:	6e 2d       	mov	r22, r14
 52e:	7f 2d       	mov	r23, r15
 530:	80 2f       	mov	r24, r16
 532:	91 2f       	mov	r25, r17
		} while (local_u32ReversedNumber != 1);
 534:	61 30       	cpi	r22, 0x01	; 1
 536:	71 05       	cpc	r23, r1
 538:	81 05       	cpc	r24, r1
 53a:	91 05       	cpc	r25, r1
 53c:	49 f7       	brne	.-46     	; 0x510 <LCD_voidDisplayNumber+0x7c>
	}
}
 53e:	1f 91       	pop	r17
 540:	0f 91       	pop	r16
 542:	ff 90       	pop	r15
 544:	ef 90       	pop	r14
 546:	df 90       	pop	r13
 548:	cf 90       	pop	r12
 54a:	08 95       	ret

0000054c <LCD_voidClear>:


void LCD_voidClear(void)
{
	/* Display Clear */
	LCD_voidSendCommand(0b00000001);
 54c:	81 e0       	ldi	r24, 0x01	; 1
 54e:	0e 94 ac 01 	call	0x358	; 0x358 <LCD_voidSendCommand>
 552:	8f e3       	ldi	r24, 0x3F	; 63
 554:	9f e1       	ldi	r25, 0x1F	; 31
 556:	01 97       	sbiw	r24, 0x01	; 1
 558:	f1 f7       	brne	.-4      	; 0x556 <LCD_voidClear+0xa>
 55a:	00 c0       	rjmp	.+0      	; 0x55c <LCD_voidClear+0x10>
 55c:	00 00       	nop
 55e:	08 95       	ret

00000560 <LED_voidInit>:
#include "LED_interface.h"


void LED_voidInit(u8 copy_u8LedPort, u8 copy_u8LedPin)
{
	DIO_voidSetPinDirection(copy_u8LedPort, copy_u8LedPin, DIO_PIN_OUTPUT);	
 560:	41 e0       	ldi	r20, 0x01	; 1
 562:	0e 94 8a 00 	call	0x114	; 0x114 <DIO_voidSetPinDirection>
 566:	08 95       	ret

00000568 <LED_voidOn>:
}


void LED_voidOn(u8 copy_u8LedPort, u8 copy_u8LedPin, u8 copy_u8LedConnectionType)
{
	switch(copy_u8LedConnectionType)	
 568:	44 23       	and	r20, r20
 56a:	19 f0       	breq	.+6      	; 0x572 <LED_voidOn+0xa>
 56c:	41 30       	cpi	r20, 0x01	; 1
 56e:	29 f0       	breq	.+10     	; 0x57a <LED_voidOn+0x12>
 570:	08 95       	ret
	{
		case LED_FORWARD_CONNECTION:
		DIO_voidSetPinValue(copy_u8LedPort, copy_u8LedPin, DIO_PIN_HIGH);
 572:	41 e0       	ldi	r20, 0x01	; 1
 574:	0e 94 03 01 	call	0x206	; 0x206 <DIO_voidSetPinValue>
		break;
 578:	08 95       	ret
		
		case LED_REVERSE_CONNECTION:
		DIO_voidSetPinValue(copy_u8LedPort, copy_u8LedPin, DIO_PIN_LOW);
 57a:	40 e0       	ldi	r20, 0x00	; 0
 57c:	0e 94 03 01 	call	0x206	; 0x206 <DIO_voidSetPinValue>
 580:	08 95       	ret

00000582 <LED_voidOff>:
}


void LED_voidOff(u8 copy_u8LedPort, u8 copy_u8LedPin, u8 copy_u8LedConnectionType)
{
	switch(copy_u8LedConnectionType)
 582:	44 23       	and	r20, r20
 584:	19 f0       	breq	.+6      	; 0x58c <LED_voidOff+0xa>
 586:	41 30       	cpi	r20, 0x01	; 1
 588:	29 f0       	breq	.+10     	; 0x594 <LED_voidOff+0x12>
 58a:	08 95       	ret
	{
		case LED_FORWARD_CONNECTION:
		DIO_voidSetPinValue(copy_u8LedPort, copy_u8LedPin, DIO_PIN_LOW);
 58c:	40 e0       	ldi	r20, 0x00	; 0
 58e:	0e 94 03 01 	call	0x206	; 0x206 <DIO_voidSetPinValue>
		break;
 592:	08 95       	ret
		
		case LED_REVERSE_CONNECTION:
		DIO_voidSetPinValue(copy_u8LedPort, copy_u8LedPin, DIO_PIN_HIGH);
 594:	41 e0       	ldi	r20, 0x01	; 1
 596:	0e 94 03 01 	call	0x206	; 0x206 <DIO_voidSetPinValue>
 59a:	08 95       	ret

0000059c <LM35_voidInit>:
#include "LM35_interface.h"


void LM35_voidInit(u8 copy_u8ChannelId)
{
	DIO_voidSetPinDirection(DIO_PORTA, copy_u8ChannelId, DIO_PIN_INPUT);
 59c:	40 e0       	ldi	r20, 0x00	; 0
 59e:	68 2f       	mov	r22, r24
 5a0:	80 e0       	ldi	r24, 0x00	; 0
 5a2:	0e 94 8a 00 	call	0x114	; 0x114 <DIO_voidSetPinDirection>
	
	ADC_voidInit(ADC_REFERENCE_INTRNAL);
 5a6:	82 e0       	ldi	r24, 0x02	; 2
 5a8:	0e 94 41 00 	call	0x82	; 0x82 <ADC_voidInit>
 5ac:	08 95       	ret

000005ae <LM35_voidGetTemperature>:
}


void LM35_voidGetTemperature(u8 copy_u8ChannelId, u8* copy_u8Temperature)
{
 5ae:	0f 93       	push	r16
 5b0:	1f 93       	push	r17
 5b2:	cf 93       	push	r28
 5b4:	df 93       	push	r29
 5b6:	00 d0       	rcall	.+0      	; 0x5b8 <LM35_voidGetTemperature+0xa>
 5b8:	cd b7       	in	r28, 0x3d	; 61
 5ba:	de b7       	in	r29, 0x3e	; 62
	if(copy_u8Temperature != NULL)
 5bc:	61 15       	cp	r22, r1
 5be:	71 05       	cpc	r23, r1
 5c0:	19 f1       	breq	.+70     	; 0x608 <LM35_voidGetTemperature+0x5a>
 5c2:	8b 01       	movw	r16, r22
	{
		u16 local_u16DigitalVal, local_u16AnaloglVal;
		
		ADC_voidGetDigitalValue(copy_u8ChannelId, &local_u16DigitalVal);
 5c4:	be 01       	movw	r22, r28
 5c6:	6f 5f       	subi	r22, 0xFF	; 255
 5c8:	7f 4f       	sbci	r23, 0xFF	; 255
 5ca:	0e 94 71 00 	call	0xe2	; 0xe2 <ADC_voidGetDigitalValue>
		
		local_u16AnaloglVal = ((u32)local_u16DigitalVal * 2560) / 1024;
 5ce:	29 81       	ldd	r18, Y+1	; 0x01
 5d0:	3a 81       	ldd	r19, Y+2	; 0x02
 5d2:	a0 e0       	ldi	r26, 0x00	; 0
 5d4:	ba e0       	ldi	r27, 0x0A	; 10
 5d6:	0e 94 ce 03 	call	0x79c	; 0x79c <__umulhisi3>
 5da:	9b 01       	movw	r18, r22
 5dc:	ac 01       	movw	r20, r24
 5de:	01 2e       	mov	r0, r17
 5e0:	1a e0       	ldi	r17, 0x0A	; 10
 5e2:	56 95       	lsr	r21
 5e4:	47 95       	ror	r20
 5e6:	37 95       	ror	r19
 5e8:	27 95       	ror	r18
 5ea:	1a 95       	dec	r17
 5ec:	d1 f7       	brne	.-12     	; 0x5e2 <LM35_voidGetTemperature+0x34>
 5ee:	10 2d       	mov	r17, r0
		
		*copy_u8Temperature = 	local_u16AnaloglVal/10;
 5f0:	ad ec       	ldi	r26, 0xCD	; 205
 5f2:	bc ec       	ldi	r27, 0xCC	; 204
 5f4:	0e 94 ce 03 	call	0x79c	; 0x79c <__umulhisi3>
 5f8:	96 95       	lsr	r25
 5fa:	87 95       	ror	r24
 5fc:	96 95       	lsr	r25
 5fe:	87 95       	ror	r24
 600:	96 95       	lsr	r25
 602:	87 95       	ror	r24
 604:	f8 01       	movw	r30, r16
 606:	80 83       	st	Z, r24
	}
	else
	{
		//return Error State
	}
 608:	0f 90       	pop	r0
 60a:	0f 90       	pop	r0
 60c:	df 91       	pop	r29
 60e:	cf 91       	pop	r28
 610:	1f 91       	pop	r17
 612:	0f 91       	pop	r16
 614:	08 95       	ret

00000616 <main>:
#include "LCD_interface.h"
#include "LM35_interface.h"


int main(void)
{
 616:	cf 93       	push	r28
 618:	df 93       	push	r29
 61a:	1f 92       	push	r1
 61c:	cd b7       	in	r28, 0x3d	; 61
 61e:	de b7       	in	r29, 0x3e	; 62
	u8 temp;
    LM35_voidInit(LM35_ADC_CHANNEL_0);
 620:	80 e0       	ldi	r24, 0x00	; 0
 622:	0e 94 ce 02 	call	0x59c	; 0x59c <LM35_voidInit>
	LCD_voidInit();
 626:	0e 94 c6 01 	call	0x38c	; 0x38c <LCD_voidInit>
	LED_voidInit(DIO_PORTC, DIO_PIN2); //LED0 G
 62a:	62 e0       	ldi	r22, 0x02	; 2
 62c:	82 e0       	ldi	r24, 0x02	; 2
 62e:	0e 94 b0 02 	call	0x560	; 0x560 <LED_voidInit>
	LED_voidInit(DIO_PORTC, DIO_PIN7); //LED1 Y
 632:	67 e0       	ldi	r22, 0x07	; 7
 634:	82 e0       	ldi	r24, 0x02	; 2
 636:	0e 94 b0 02 	call	0x560	; 0x560 <LED_voidInit>
	LED_voidInit(DIO_PORTD, DIO_PIN3); //LED2 B
 63a:	63 e0       	ldi	r22, 0x03	; 3
 63c:	83 e0       	ldi	r24, 0x03	; 3
 63e:	0e 94 b0 02 	call	0x560	; 0x560 <LED_voidInit>
	LED_voidInit(DIO_PORTA, DIO_PIN3); //LED3 R
 642:	63 e0       	ldi	r22, 0x03	; 3
 644:	80 e0       	ldi	r24, 0x00	; 0
 646:	0e 94 b0 02 	call	0x560	; 0x560 <LED_voidInit>
	
	LCD_voidDisplayString((u8*)"Auto. Weather System");
 64a:	80 e6       	ldi	r24, 0x60	; 96
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	0e 94 34 02 	call	0x468	; 0x468 <LCD_voidDisplayString>
 652:	2f ef       	ldi	r18, 0xFF	; 255
 654:	83 ed       	ldi	r24, 0xD3	; 211
 656:	90 e3       	ldi	r25, 0x30	; 48
 658:	21 50       	subi	r18, 0x01	; 1
 65a:	80 40       	sbci	r24, 0x00	; 0
 65c:	90 40       	sbci	r25, 0x00	; 0
 65e:	e1 f7       	brne	.-8      	; 0x658 <main+0x42>
 660:	00 c0       	rjmp	.+0      	; 0x662 <main+0x4c>
 662:	00 00       	nop
	_delay_ms(1000);
	LCD_voidClear();
 664:	0e 94 a6 02 	call	0x54c	; 0x54c <LCD_voidClear>
	
    while (1) 
    {
		LM35_voidGetTemperature(LM35_ADC_CHANNEL_0, &temp);
 668:	be 01       	movw	r22, r28
 66a:	6f 5f       	subi	r22, 0xFF	; 255
 66c:	7f 4f       	sbci	r23, 0xFF	; 255
 66e:	80 e0       	ldi	r24, 0x00	; 0
 670:	0e 94 d7 02 	call	0x5ae	; 0x5ae <LM35_voidGetTemperature>
		
		LCD_voidDisplayString((u8*)"Temp. is: ");
 674:	85 e7       	ldi	r24, 0x75	; 117
 676:	90 e0       	ldi	r25, 0x00	; 0
 678:	0e 94 34 02 	call	0x468	; 0x468 <LCD_voidDisplayString>
		LCD_voidDisplayNumber(temp);
 67c:	69 81       	ldd	r22, Y+1	; 0x01
 67e:	70 e0       	ldi	r23, 0x00	; 0
 680:	80 e0       	ldi	r24, 0x00	; 0
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	0e 94 4a 02 	call	0x494	; 0x494 <LCD_voidDisplayNumber>
		if(temp < 15)
 688:	89 81       	ldd	r24, Y+1	; 0x01
 68a:	8f 30       	cpi	r24, 0x0F	; 15
 68c:	a8 f4       	brcc	.+42     	; 0x6b8 <main+0xa2>
		{
			LED_voidOn (DIO_PORTC, DIO_PIN2, LED_FORWARD_CONNECTION); //LED0 G
 68e:	40 e0       	ldi	r20, 0x00	; 0
 690:	62 e0       	ldi	r22, 0x02	; 2
 692:	82 e0       	ldi	r24, 0x02	; 2
 694:	0e 94 b4 02 	call	0x568	; 0x568 <LED_voidOn>
			LED_voidOff(DIO_PORTC, DIO_PIN7, LED_FORWARD_CONNECTION); //LED1 Y
 698:	40 e0       	ldi	r20, 0x00	; 0
 69a:	67 e0       	ldi	r22, 0x07	; 7
 69c:	82 e0       	ldi	r24, 0x02	; 2
 69e:	0e 94 c1 02 	call	0x582	; 0x582 <LED_voidOff>
			LED_voidOff(DIO_PORTD, DIO_PIN3, LED_FORWARD_CONNECTION); //LED2 B
 6a2:	40 e0       	ldi	r20, 0x00	; 0
 6a4:	63 e0       	ldi	r22, 0x03	; 3
 6a6:	83 e0       	ldi	r24, 0x03	; 3
 6a8:	0e 94 c1 02 	call	0x582	; 0x582 <LED_voidOff>
			LED_voidOff(DIO_PORTA, DIO_PIN3, LED_FORWARD_CONNECTION); //LED3 R
 6ac:	40 e0       	ldi	r20, 0x00	; 0
 6ae:	63 e0       	ldi	r22, 0x03	; 3
 6b0:	80 e0       	ldi	r24, 0x00	; 0
 6b2:	0e 94 c1 02 	call	0x582	; 0x582 <LED_voidOff>
 6b6:	44 c0       	rjmp	.+136    	; 0x740 <main+0x12a>
		}
		else if(temp < 25)
 6b8:	89 31       	cpi	r24, 0x19	; 25
 6ba:	a8 f4       	brcc	.+42     	; 0x6e6 <main+0xd0>
		{
				LED_voidOff(DIO_PORTC, DIO_PIN2, LED_FORWARD_CONNECTION); //LED0 G
 6bc:	40 e0       	ldi	r20, 0x00	; 0
 6be:	62 e0       	ldi	r22, 0x02	; 2
 6c0:	82 e0       	ldi	r24, 0x02	; 2
 6c2:	0e 94 c1 02 	call	0x582	; 0x582 <LED_voidOff>
				LED_voidOn (DIO_PORTC, DIO_PIN7, LED_FORWARD_CONNECTION); //LED1 Y
 6c6:	40 e0       	ldi	r20, 0x00	; 0
 6c8:	67 e0       	ldi	r22, 0x07	; 7
 6ca:	82 e0       	ldi	r24, 0x02	; 2
 6cc:	0e 94 b4 02 	call	0x568	; 0x568 <LED_voidOn>
				LED_voidOff(DIO_PORTD, DIO_PIN3, LED_FORWARD_CONNECTION); //LED2 B
 6d0:	40 e0       	ldi	r20, 0x00	; 0
 6d2:	63 e0       	ldi	r22, 0x03	; 3
 6d4:	83 e0       	ldi	r24, 0x03	; 3
 6d6:	0e 94 c1 02 	call	0x582	; 0x582 <LED_voidOff>
				LED_voidOff(DIO_PORTA, DIO_PIN3, LED_FORWARD_CONNECTION); //LED3 R
 6da:	40 e0       	ldi	r20, 0x00	; 0
 6dc:	63 e0       	ldi	r22, 0x03	; 3
 6de:	80 e0       	ldi	r24, 0x00	; 0
 6e0:	0e 94 c1 02 	call	0x582	; 0x582 <LED_voidOff>
 6e4:	2d c0       	rjmp	.+90     	; 0x740 <main+0x12a>
		}
		else if(temp < 35)
 6e6:	83 32       	cpi	r24, 0x23	; 35
 6e8:	a8 f4       	brcc	.+42     	; 0x714 <main+0xfe>
		{
				LED_voidOff(DIO_PORTC, DIO_PIN2, LED_FORWARD_CONNECTION); //LED0 G
 6ea:	40 e0       	ldi	r20, 0x00	; 0
 6ec:	62 e0       	ldi	r22, 0x02	; 2
 6ee:	82 e0       	ldi	r24, 0x02	; 2
 6f0:	0e 94 c1 02 	call	0x582	; 0x582 <LED_voidOff>
				LED_voidOff(DIO_PORTC, DIO_PIN7, LED_FORWARD_CONNECTION); //LED1 Y
 6f4:	40 e0       	ldi	r20, 0x00	; 0
 6f6:	67 e0       	ldi	r22, 0x07	; 7
 6f8:	82 e0       	ldi	r24, 0x02	; 2
 6fa:	0e 94 c1 02 	call	0x582	; 0x582 <LED_voidOff>
				LED_voidOn (DIO_PORTD, DIO_PIN3, LED_FORWARD_CONNECTION); //LED2 B
 6fe:	40 e0       	ldi	r20, 0x00	; 0
 700:	63 e0       	ldi	r22, 0x03	; 3
 702:	83 e0       	ldi	r24, 0x03	; 3
 704:	0e 94 b4 02 	call	0x568	; 0x568 <LED_voidOn>
				LED_voidOff(DIO_PORTA, DIO_PIN3, LED_FORWARD_CONNECTION); //LED3 R
 708:	40 e0       	ldi	r20, 0x00	; 0
 70a:	63 e0       	ldi	r22, 0x03	; 3
 70c:	80 e0       	ldi	r24, 0x00	; 0
 70e:	0e 94 c1 02 	call	0x582	; 0x582 <LED_voidOff>
 712:	16 c0       	rjmp	.+44     	; 0x740 <main+0x12a>
		}
		else if(temp <= 50)
 714:	83 33       	cpi	r24, 0x33	; 51
 716:	a0 f4       	brcc	.+40     	; 0x740 <main+0x12a>
		{
				LED_voidOff(DIO_PORTC, DIO_PIN2, LED_FORWARD_CONNECTION); //LED0 G
 718:	40 e0       	ldi	r20, 0x00	; 0
 71a:	62 e0       	ldi	r22, 0x02	; 2
 71c:	82 e0       	ldi	r24, 0x02	; 2
 71e:	0e 94 c1 02 	call	0x582	; 0x582 <LED_voidOff>
				LED_voidOff(DIO_PORTC, DIO_PIN7, LED_FORWARD_CONNECTION); //LED1 Y
 722:	40 e0       	ldi	r20, 0x00	; 0
 724:	67 e0       	ldi	r22, 0x07	; 7
 726:	82 e0       	ldi	r24, 0x02	; 2
 728:	0e 94 c1 02 	call	0x582	; 0x582 <LED_voidOff>
				LED_voidOff(DIO_PORTD, DIO_PIN3, LED_FORWARD_CONNECTION); //LED2 B
 72c:	40 e0       	ldi	r20, 0x00	; 0
 72e:	63 e0       	ldi	r22, 0x03	; 3
 730:	83 e0       	ldi	r24, 0x03	; 3
 732:	0e 94 c1 02 	call	0x582	; 0x582 <LED_voidOff>
				LED_voidOn (DIO_PORTA, DIO_PIN3, LED_FORWARD_CONNECTION); //LED3 R
 736:	40 e0       	ldi	r20, 0x00	; 0
 738:	63 e0       	ldi	r22, 0x03	; 3
 73a:	80 e0       	ldi	r24, 0x00	; 0
 73c:	0e 94 b4 02 	call	0x568	; 0x568 <LED_voidOn>
 740:	2f ef       	ldi	r18, 0xFF	; 255
 742:	83 ed       	ldi	r24, 0xD3	; 211
 744:	90 e3       	ldi	r25, 0x30	; 48
 746:	21 50       	subi	r18, 0x01	; 1
 748:	80 40       	sbci	r24, 0x00	; 0
 74a:	90 40       	sbci	r25, 0x00	; 0
 74c:	e1 f7       	brne	.-8      	; 0x746 <main+0x130>
 74e:	00 c0       	rjmp	.+0      	; 0x750 <main+0x13a>
 750:	00 00       	nop
		}
		_delay_ms(1000);
		LCD_voidClear();
 752:	0e 94 a6 02 	call	0x54c	; 0x54c <LCD_voidClear>
    }
 756:	88 cf       	rjmp	.-240    	; 0x668 <main+0x52>

00000758 <__udivmodsi4>:
 758:	a1 e2       	ldi	r26, 0x21	; 33
 75a:	1a 2e       	mov	r1, r26
 75c:	aa 1b       	sub	r26, r26
 75e:	bb 1b       	sub	r27, r27
 760:	fd 01       	movw	r30, r26
 762:	0d c0       	rjmp	.+26     	; 0x77e <__udivmodsi4_ep>

00000764 <__udivmodsi4_loop>:
 764:	aa 1f       	adc	r26, r26
 766:	bb 1f       	adc	r27, r27
 768:	ee 1f       	adc	r30, r30
 76a:	ff 1f       	adc	r31, r31
 76c:	a2 17       	cp	r26, r18
 76e:	b3 07       	cpc	r27, r19
 770:	e4 07       	cpc	r30, r20
 772:	f5 07       	cpc	r31, r21
 774:	20 f0       	brcs	.+8      	; 0x77e <__udivmodsi4_ep>
 776:	a2 1b       	sub	r26, r18
 778:	b3 0b       	sbc	r27, r19
 77a:	e4 0b       	sbc	r30, r20
 77c:	f5 0b       	sbc	r31, r21

0000077e <__udivmodsi4_ep>:
 77e:	66 1f       	adc	r22, r22
 780:	77 1f       	adc	r23, r23
 782:	88 1f       	adc	r24, r24
 784:	99 1f       	adc	r25, r25
 786:	1a 94       	dec	r1
 788:	69 f7       	brne	.-38     	; 0x764 <__udivmodsi4_loop>
 78a:	60 95       	com	r22
 78c:	70 95       	com	r23
 78e:	80 95       	com	r24
 790:	90 95       	com	r25
 792:	9b 01       	movw	r18, r22
 794:	ac 01       	movw	r20, r24
 796:	bd 01       	movw	r22, r26
 798:	cf 01       	movw	r24, r30
 79a:	08 95       	ret

0000079c <__umulhisi3>:
 79c:	a2 9f       	mul	r26, r18
 79e:	b0 01       	movw	r22, r0
 7a0:	b3 9f       	mul	r27, r19
 7a2:	c0 01       	movw	r24, r0
 7a4:	a3 9f       	mul	r26, r19
 7a6:	70 0d       	add	r23, r0
 7a8:	81 1d       	adc	r24, r1
 7aa:	11 24       	eor	r1, r1
 7ac:	91 1d       	adc	r25, r1
 7ae:	b2 9f       	mul	r27, r18
 7b0:	70 0d       	add	r23, r0
 7b2:	81 1d       	adc	r24, r1
 7b4:	11 24       	eor	r1, r1
 7b6:	91 1d       	adc	r25, r1
 7b8:	08 95       	ret

000007ba <_exit>:
 7ba:	f8 94       	cli

000007bc <__stop_program>:
 7bc:	ff cf       	rjmp	.-2      	; 0x7bc <__stop_program>
